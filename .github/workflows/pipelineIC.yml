name: Workflow
on:
  push:
    branches:
      - feat-clase3

jobs:        
  SAST:
    runs-on: ubuntu-latest
    steps:

    
    - name: Instalar curl
      run: |
        sudo apt-get update && sudo apt-get install -y curl  

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Checkout code
      uses: actions/checkout@v2

    
    - name: Build
      run: | 
        chmod 777 gradlew
        ./gradlew build
    
    - name: Validando existencia de proyecto en SonarCloud
      id: validateProjectOnSonar
      run: |
        set +e
        curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/projects/create' -d 'name=${{ github.event.repository.name }}' -d 'project=${{ github.event.repository.name }}' -d 'organization=oscargitops' -d 'visibility=public'
        if [ $? -ne 0 ]
        then
          echo "Proyecto ya existe en Sonarcloud"
        else
          echo "Proyecto ${{ github.event.repository.name }} fue creado exitosamente en SonarCloud"
          echo "Se establece rama main como rama por defecto"
          curl -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/project_branches/rename' -d 'name=main'  -d 'project=${{ github.event.repository.name }}'
        fi

  
    - name: Validando tipo de proyecto
      id: tipoProyecto
      if: steps.validateProjectOnSonar.outputs.proyectoExiste == '1'
      run: |
        pwd
        ls -R
        if [ -f "build.gradle" ]
        then
          echo "Proyecto Java"
          if grep -q 'id "org.sonarqube" version "3.3"' build.gradle
          then
            echo "El plugin de SonarCloud ya está presente en build.gradle"
          else
            sed -i '/id '\''java'\''/a \ \ \ \ id '\''org.sonarqube'\'' version '\''3.3'\''' build.gradle
            echo "El plugin de SonarCloud no estaba presente y se ha sido añadido a build.gradle"
            cat build.gradle
          fi

        else
          echo "Tipo de proyecto desconocido"
        fi        


    #habilitar ejecucion
    - name: Enable execution gradlew
      run: | 
         chmod 777 gradlew
  
    - name: Run SonarQube analysis
      run: |
        ./gradlew sonarqube \
        -Dsonar.projectKey=OscarGitOps_pet-clinic \
        -Dsonar.organization=oscargitops \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
        -Dsonar.branch.name=

    
    - name: Validate Quality Gate
      run: |
        idanalisis=$(curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/ce/component?pet-clinic')
        idanalisisParse=$(echo "$idanalisis" | jq .current.analysisId | sed -e 's/^"//' -e 's/"$//')

        qualitygate=$(curl -f -X POST -u '${{ secrets.SONAR_TOKEN }}:' 'https://sonarcloud.io/api/qualitygates/project_status?analysisId=$idanalisisParse')
        qualitygateStatus=$(echo "$qualitygate" | jq .projectStatus.status | sed -e 's/^"//' -e 's/"$//')

        case $qualitygateStatus in
            *"OK"*)
              echo "Proyecto Cumple con quality gate"
              exit 0
              ;;
            *"ERROR"*)
              echo "Proyecto NO cumple con QualityGate"
              exit 1
              ;;
            *)
              echo "Proyecto NO cumple"
              exit 1
              ;;
          esac


#--------------------- SCA -------------------------------------------
      
  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2      

    - name: Build
      id: build
      run: |
        #pwd
        #ls -R
        if [ -f "build.gradle" ]
        then
          echo "Utiliza build.gradle, proyecto Java"
          echo "Se habilita permiso de ejecución de archivo gradlew"
          chmod 777 gradlew
          ./gradlew build
          ls -R
        else
          echo "Otro tipo de proyecto"
        fi
    
    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@1.1.0
      env:
        JAVA_HOME: /opt/jdk
      id: Depcheck
      with:
        project: '${{ github.event.repository.name }}'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --failOnCVSS 7
          --enableRetired

    - name: Upload Test result
      uses: actions/upload-artifact@master
      with:
        name: Depcheck report
        path: ${{github.workspace}}/reports

    - name: Upload Test result
      uses: actions/upload-artifact@master
      with:
        name: JAR
        path: ${{github.workspace}}/build/libs/spring-petclinic-2.6.0.jar


#-------------------- Docker Build Image ----------------------------

  DockerBuild:
    needs: SCA
    runs-on: self-hosted
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    - name: Download JAR
      uses: actions/download-artifact@master
      with:
        name: JAR
        path: ${{github.workspace}}
    
    - name: Build Docker
      run: |
        ls -R
        docker build --tag oscargitops/pet-clinic:latest .

    - name: Push Docker
      run: | 
        docker push oscargitops/pet-clinic:latest

# ------------------ Docker Scan ------------------------------------

  DockerScan:
    needs: DockerBuild
    runs-on: ubuntu-latest
    steps:
    
    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull de la Imagen Docker
      run: |
        docker pull oscargitops/pet-clinic:latest
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'oscargitops/pet-clinic:latest'
        format: 'table'
    
    - name: Push Docker
      run: | 
        docker push oscargitops/pet-clinic:latest



# ----------------- DAST -----------------------------------------

  DAST: 
    needs: DockerScan
    runs-on: self-hosted
    steps:
    
    - name: OWASP ZAP Scan
      uses: zaproxy/action-baseline@v0.11.0
      with:
        target: 'http://localhost:8085'
        
#  DAST:
#    needs: DockerScan
#    runs-on: self-hosted
#    steps:
    
#    - name: Despliegue Aplicaion
#      run: |
#        docker run -p 8085:8085 --name pet-clinic-deploy -d b4b4y4g4x/cursodevsecops-test:latest

#    - name: Sleep
#      run: | 
#        sleep 30

#    - name: OWASP ZAP Scan
#      uses: zaproxy/action-baseline@v0.11.0
#      with:
#        target: 'http://localhost:8085/'
    
#    - name: OWASP ZAP Scan
#      run: |
#        docker pull owasp/zap2docker-stable
#        docker run --rm -v ${PWD}:/zap/wrk/:rw -t owasp/zap2docker-stable & zap-baseline.py -t http://localhost:8085 -r DAST.htmlWor
